; CONFIGURATION FILE FOR ZSTD
; VERSION 1.1 FOR ANY 
; CPU ARCHITECTURE.

; START OF FILE

#def num = "A number or valid memory address, a number will be andom memory address."


#def loc num = "Lock on a memory address so your command won't be assigned to a random memory address."

#def hlt = "Will halt the current process."

#def add num, num = "Add a number with another number, assigned to random sector in the cpu."

#def sub num, num = "Subtract a number from another number, assigned to random sector in the cpu."

#def addm num, num, memaddr = "Add a number to another number, assigned to a specified memory address."

#def subm num, num, memaddr = "Subtract a number from another number, assigned to a specified memory address."

# THE FOLLOWING ARE TEMPORARY, SINCE THEY'RE REPEATED VERSIONS OF ADD AND SUB! BY DEFAULT, BOTH ARE SENT TO EACH REGISTER THE ADD AND SUB HAS, SPECIFICALLY FOR EACH.

#def mul num, num = "Multiply a number with another number (Repeated Addition)"

#def div num, num = "Divide a number from another number (Repeated Subtraction)"


#def mov memaddr, location = "Move a memory address or value to another location."

#def ebp memaddr, location = "Subtract data from a memory address."

#def eax memaddr, location = "Add data to a memory address."

#def AND = "Logic Gate."

#def XOR = "Logic Gate."

#def XNOR = "Logic Gate."

#def OR = "Logic Gate."

#def NAND = "Logic Gate."

#def buffer memaddr, gate = "A buffer, assigned to a logic gate."

#def syscall = "Call the system."

#def call func, location = "Call a specific function to a location."

#def bitf range, range = "Find a bit / byte, from a range to another range."

#def bita bit, memaddr = "Add a bit / byte to a memory address."

#def bits bit, memaddr = "Subtract a bit / byte from a memory address."

#def mtest range, range, disk = "Test the memory from a disk, from a range to an another range."

#def jmp location = "Jump to another value or address."